"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const parser_1 = require("../src/parser/parser");
const tokenizer = require("../src/parser/tokenizer");
const utilities = require("../src/parser/utilities");
function getTokens(str) {
    return [...tokenizer.getTokens(str)];
}
describe('completion', () => {
    test('empty', () => {
        const tokensOnLine = [];
        const index = 0;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result.length).toBe(0);
    });
    test('undefined', () => {
        const tokensOnLine = getTokens('a()');
        const index = 1;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result.length).toBe(0);
    });
    test('undefined 2', () => {
        const tokensOnLine = getTokens('a()');
        const index = 2;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result.length).toBe(0);
    });
    test('undefined 3', () => {
        const tokensOnLine = getTokens('a ');
        const index = 1;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result.length).toBe(0);
    });
    test('basic dot', () => {
        const tokensOnLine = getTokens('a.b');
        const index = 2;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
    });
    test('two dots', () => {
        const tokensOnLine = getTokens('a.b.c');
        const index = 4;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
        expect(result[2].value).toBe('c');
    });
    test('single reference', () => {
        const tokensOnLine = getTokens('do a()');
        const index = 2;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
    });
    test('dot with parens', () => {
        const tokensOnLine = getTokens('a().b');
        const index = 4;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
    });
    test('dot with parens content', () => {
        const tokensOnLine = getTokens('a(blah).b');
        const index = 5;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
    });
    test('dot with parens content with parens', () => {
        const tokensOnLine = getTokens('a(blah(bleh())).b');
        const index = 10;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
    });
    test('dot with parens content on dot', () => {
        const tokensOnLine = getTokens('a(blah).b');
        const index = 4;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('.');
    });
    test('clusterfuck', () => {
        const tokensOnLine = getTokens('a.b().c(x(y)).d');
        const index = 14;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
        expect(result[2].value).toBe('c');
        expect(result[3].value).toBe('d');
    });
    test('clusterfuck2', () => {
        const tokensOnLine = getTokens('a.b().c(x(y)).d');
        const index = 14;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('a');
        expect(result[1].value).toBe('b');
        expect(result[2].value).toBe('c');
        expect(result[3].value).toBe('d');
    });
    test('mumps call label', () => {
        const tokensOnLine = getTokens('method^CLASS()');
        const index = 0;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[1].value).toBe('method');
        expect(result[0].value).toBe('CLASS');
    });
    test('mumps call routine', () => {
        const tokensOnLine = getTokens('method^CLASS()');
        const index = 2;
        const result = utilities.getCallTokens(tokensOnLine, index);
        expect(result[0].value).toBe('CLASS');
    });
});
describe('ParsedDocFinder', () => {
    let filesDir;
    let parentFilePath;
    let childFilePath;
    let parsedParent;
    let parsedChild;
    const getPaths = (activeRoutine) => {
        return {
            activeRoutine,
            corePsl: '',
            projectPsl: [filesDir],
            tables: [],
        };
    };
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        filesDir = path.resolve('__tests__', 'files');
        parentFilePath = path.join(filesDir, 'ZParent.PROC');
        childFilePath = path.join(filesDir, 'ZChild.PROC');
        parsedParent = yield (0, parser_1.parseFile)(parentFilePath);
        parsedChild = yield (0, parser_1.parseFile)(childFilePath);
    }));
    test('Find dummy in child', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'dummy', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.property);
        expect(result.member.id.value).toBe('dummy');
        expect(result.fsPath).toBe(childFilePath);
    }));
    test('Find property in child', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'propInChild', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.property);
        expect(result.member.id.value).toBe('propInChild');
        expect(result.fsPath).toBe(childFilePath);
    }));
    test('Find method in child', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'methodInChild', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.method);
        expect(result.member.id.value).toBe('methodInChild');
        expect(result.fsPath).toBe(childFilePath);
    }));
    test('Find method overriden method in child', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'methodInParentAndChild', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.method);
        expect(result.member.id.value).toBe('methodInParentAndChild');
        expect(result.fsPath).toBe(childFilePath);
    }));
    test('Find method inherited method in parent', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'methodInParent', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.method);
        expect(result.member.id.value).toBe('methodInParent');
        expect(result.fsPath).toBe(parentFilePath);
    }));
    test('Find method in parent', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(parentFilePath);
        const finder = new utilities.ParsedDocFinder(parsedParent, paths);
        const result = yield searchParser(finder, 'methodInParent', { character: 0, line: 0 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.method);
        expect(result.member.id.value).toBe('methodInParent');
        expect(result.fsPath).toBe(parentFilePath);
    }));
    test('Find y in methodInChild', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'y', { character: 0, line: 12 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.declaration);
        expect(result.member.id.value).toBe('y');
        expect(result.fsPath).toBe(childFilePath);
    }));
    test('Do not find x', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'x', { character: 0, line: 12 });
        expect(result).toBeUndefined();
    }));
    test('Do not find reallySpecificName', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(childFilePath);
        const finder = new utilities.ParsedDocFinder(parsedChild, paths);
        const result = yield searchParser(finder, 'reallySpecificName', { character: 0, line: 10 });
        expect(result).toBeUndefined();
    }));
    test('Do find reallySpecificName', () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = getPaths(parentFilePath);
        const finder = new utilities.ParsedDocFinder(parsedParent, paths);
        const result = yield searchParser(finder, 'reallySpecificName', { character: 0, line: 10 });
        expect(result.member.memberClass).toBe(parser_1.MemberClass.declaration);
        expect(result.member.id.value).toBe('reallySpecificName');
        expect(result.fsPath).toBe(parentFilePath);
    }));
});
function searchParser(finder, value, position) {
    return finder.searchParser(new tokenizer.Token(1 /* tokenizer.Type.Alphanumeric */, value, position));
}
//# sourceMappingURL=data:application/json;base64,